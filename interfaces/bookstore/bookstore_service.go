// Code generated by service_generator. DO NOT EDIT.
package bookstore

import (
	"context"
	"os"

	"saastack/core" 
	pb "saastack/interfaces/bookstore/proto"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/joho/godotenv"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

type BookstoreServiceInterface interface {
	pb.BookstoreServiceServer
}

type PluginRegistry interface {
	GetPlugin(interfaceName, pluginName string) (interface{}, bool)
}

type BookstoreService struct {
	pb.UnimplementedBookstoreServiceServer
	registry PluginRegistry
}
func NewBookstoreService(registry PluginRegistry) *BookstoreService {
	return &BookstoreService{
		registry: registry,
	}
}

func init() {
	service := NewBookstoreService(core.GlobalRegistry)
	core.GlobalRegistry.RegisterService("bookstore", service)
}

func (s *BookstoreService) RegisterGRPC(server *grpc.Server) {
	pb.RegisterBookstoreServiceServer(server, s)
}

func (s *BookstoreService) RegisterHTTP(ctx context.Context, mux *runtime.ServeMux, endpoint string, opts []grpc.DialOption) error {
	return pb.RegisterBookstoreServiceHandlerFromEndpoint(ctx, mux, endpoint, opts)
}


func (s *BookstoreService) AddBook(ctx context.Context, req *pb.AddBookRequest) (*pb.GenericResponse, error) {
	_ = godotenv.Load(".env")
	envVarName := "BOOKSTORE_PLUGIN"
	pluginName := os.Getenv(envVarName)

	if req.Plugin != "" {
		pluginName = req.Plugin
	}

	pluginInstance, ok := s.registry.GetPlugin("bookstore", pluginName)
	if !ok {
		return nil, status.Errorf(codes.Unimplemented, "plugin '%s' for interface '%s' not found", pluginName, "bookstore")
	}

	servicePlugin, ok := pluginInstance.(BookstoreServiceInterface)
	if !ok {
		return nil, status.Errorf(codes.Internal, "plugin '%s' does not implement required interface BookstoreServiceInterface (for 'bookstore' plugin type)", pluginName)
	}

	return servicePlugin.AddBook(ctx, req)
}

func (s *BookstoreService) GetBook(ctx context.Context, req *pb.GetBookRequest) (*pb.GenericResponse, error) {
	_ = godotenv.Load(".env")
	envVarName := "BOOKSTORE_PLUGIN"
	pluginName := os.Getenv(envVarName)

	if req.Plugin != "" {
		pluginName = req.Plugin
	}

	pluginInstance, ok := s.registry.GetPlugin("bookstore", pluginName)
	if !ok {
		return nil, status.Errorf(codes.Unimplemented, "plugin '%s' for interface '%s' not found", pluginName, "bookstore")
	}

	servicePlugin, ok := pluginInstance.(BookstoreServiceInterface)
	if !ok {
		return nil, status.Errorf(codes.Internal, "plugin '%s' does not implement required interface BookstoreServiceInterface (for 'bookstore' plugin type)", pluginName)
	}

	return servicePlugin.GetBook(ctx, req)
}

func (s *BookstoreService) ListBooks(ctx context.Context, req *pb.ListBooksRequest) (*pb.ListBooksResponse, error) {
	_ = godotenv.Load(".env")
	envVarName := "BOOKSTORE_PLUGIN"
	pluginName := os.Getenv(envVarName)

	if req.Plugin != "" {
		pluginName = req.Plugin
	}

	pluginInstance, ok := s.registry.GetPlugin("bookstore", pluginName)
	if !ok {
		return nil, status.Errorf(codes.Unimplemented, "plugin '%s' for interface '%s' not found", pluginName, "bookstore")
	}

	servicePlugin, ok := pluginInstance.(BookstoreServiceInterface)
	if !ok {
		return nil, status.Errorf(codes.Internal, "plugin '%s' does not implement required interface BookstoreServiceInterface (for 'bookstore' plugin type)", pluginName)
	}

	return servicePlugin.ListBooks(ctx, req)
}

func (s *BookstoreService) DeleteBook(ctx context.Context, req *pb.DeleteBookRequest) (*pb.GenericResponse, error) {
	_ = godotenv.Load(".env")
	envVarName := "BOOKSTORE_PLUGIN"
	pluginName := os.Getenv(envVarName)

	if req.Plugin != "" {
		pluginName = req.Plugin
	}

	pluginInstance, ok := s.registry.GetPlugin("bookstore", pluginName)
	if !ok {
		return nil, status.Errorf(codes.Unimplemented, "plugin '%s' for interface '%s' not found", pluginName, "bookstore")
	}

	servicePlugin, ok := pluginInstance.(BookstoreServiceInterface)
	if !ok {
		return nil, status.Errorf(codes.Internal, "plugin '%s' does not implement required interface BookstoreServiceInterface (for 'bookstore' plugin type)", pluginName)
	}

	return servicePlugin.DeleteBook(ctx, req)
}

